---

#
# Stop/Remove database data and service containers
#

- name: oracle-osb | Stop the service container
  docker:
    name: "{{ docker_osb_service_ctn_name }}"
    image: "{{ docker_osb_img_name }}"
    state: stopped
  tags:
    - stop-osb-service-container
    - remove-osb-service-container
    - remove-osb-data-container
    - stop-all-services

- name: oracle-osb | Remove the service container
  docker:
    name: "{{ docker_osb_service_ctn_name }}"
    image: "{{ docker_osb_img_name }}"
    state: absent
  tags:
    - remove-osb-service-container
    - remove-osb-data-container

- name: oracle-osb | Remove the data container
  docker:
    name: "{{ docker_osb_data_ctn_name }}"
    image: "{{ docker_osb_img_name }}"
    state: absent
  tags:
    - remove-osb-data-container

- name: oracle-db | Stop the service container
  docker:
    name: "{{ docker_database_service_ctn_name }}"
    image: "{{ docker_database_img_name }}"
    state: stopped
  tags:
    - stop-db-service-container
    - remove-db-service-container
    - remove-db-data-container
    - stop-all-services

- name: oracle-db | Remove the service container
  docker:
    name: "{{ docker_database_service_ctn_name }}"
    image: "{{ docker_database_img_name }}"
    state: absent
  tags:
    - remove-db-service-container
    - remove-db-data-container

- name: oracle-db | Remove the data container
  docker:
    name: "{{ docker_database_data_ctn_name }}"
    image: "{{ docker_database_img_name }}"
    state: absent
  tags:
    - remove-db-data-container

#
# Create/Start the databas/osb data and service containers
#

# Ensure that a database data container exists. If no container exists,
# it will be created, but not started.
- name: oracle-db | Create the data container
  docker:
    name: "{{ docker_database_data_ctn_name }}"
    image: "{{ docker_database_img_name }}"
    state: present
    volumes: "{{ docker_database_data_ctn_volumes }}"
    docker_api_version: 1.18
  tags:
    - create-db-data-container
    - start-db-service-container
    - start-all-services

# Create and Startup an Oracle database 12c container. Ensure the database data
# are stored and persisted in the data-container.
# NOTE: memory_limit seems not working with ansible==1.9.2. memory_limit Tested
# and worked with Ansible==2.0.0 without setting 'docker_api_version' parameter.
- name: oracle-db | Run the service container
  docker:
    name: "{{ docker_database_service_ctn_name }}"
    image: "{{ docker_database_img_name }}"
    state: started
    hostname: "{{ docker_database_service_ctn_hostname }}"
    ports: "{{ docker_database_service_ctn_mapped_ports }}"
    volumes_from:
      - "{{ docker_database_data_ctn_name }}"
    env: "{{ docker_database_service_ctn_environment_vars }}"
    memory_limit: "{{ docker_database_service_ctn_memory }}"
    docker_api_version: 1.18
  tags:
    - start-db-service-container
    - start-all-services

- name: oracle-db | Get service container status
  shell: "docker inspect --format {% raw %} '{{ .State.Status }}' {% endraw %} {{ docker_database_service_ctn_name }}"
  register: docker_db_inspect_rst
  ignore_errors: true
  tags:
    - start-db-service-container
    - start-all-services
    - check-db-connection

# A little hack (to keep code clean) is to override the 'docker_db_inspect_rst.stdout'
# variable if docker inspect command fails.
- set_fact:
    docker_db_inspect_rst:
      stdout: 'not created'
  when: docker_db_inspect_rst.rc != 0
  tags:
    - start-db-service-container
    - start-all-services
    - check-db-connection

- name: oracle-db | Wait for the Database server to startup
  shell: "docker logs --tail=1 {{ docker_database_service_ctn_name }}"
  register: sqlplus_rst
  until: sqlplus_rst.stdout.find('Database ready to use') != -1
  retries: 30
  delay: 20
  when: docker_db_inspect_rst.stdout == 'running'
  tags:
    - start-db-service-container
    - start-all-services

- debug:
    msg: "The Database service container '{{ docker_database_service_ctn_name }}' is {{ docker_db_inspect_rst.stdout }}."
  tags:
    - check-db-connection

- name: oracle-osb | Create the data container
  docker:
    name: "{{ docker_osb_data_ctn_name }}"
    image: "{{ docker_osb_img_name }}"
    state: present
    volumes: "{{ docker_osb_data_ctn_volumes }}"
    command: 'true'
  tags:
    - create-osb-data-container
    - start-osb-service-container
    - start-all-services

- name: oracle-osb | Run the service container
  docker:
    name: "{{ docker_osb_service_ctn_name }}"
    image: "{{ docker_osb_img_name }}"
    state: started
    hostname: "{{ docker_osb_service_ctn_hostname }}"
    links:
      - "{{ docker_database_service_ctn_name }}:{{ docker_database_service_ctn_hostname }}"
    volumes_from:
      - "{{ docker_osb_data_ctn_name }}"
    volumes: "{{ docker_osb_service_ctn_volumes }}"
    expose: "{{ docker_osb_service_ctn_exposed_ports }}"
    ports: "{{ docker_osb_service_ctn_mapped_ports }}"
    env: "{{ docker_osb_service_ctn_environment_vars }}"
    memory_limit: "{{ docker_osb_service_ctn_memory }}"
    command: '/entrypoint.sh'
  tags:
    - start-osb-service-container
    - start-all-services

- name: oracle-osb | Get service container status
  shell: "docker inspect --format {% raw %} '{{ .State.Status }}' {% endraw %} {{ docker_osb_service_ctn_name }}"
  register: docker_osb_inspect_rst
  ignore_errors: true
  tags:
    - start-osb-service-container
    - check-osb-service-ctn-status
    - start-all-services

- set_fact:
    docker_osb_inspect_rst:
      stdout: 'not created'
  when: docker_osb_inspect_rst.rc != 0
  tags:
    - check-osb-service-ctn-status

- debug:
    msg: "The OSB service container '{{ docker_osb_service_ctn_name }}' is {{ docker_osb_inspect_rst.stdout }}."
  tags:
    - check-osb-container-status

- name: Wait for Nodemanager to Startup
  shell: "docker exec {{ docker_osb_service_ctn_name }} bash -c \"netstat -tanp | grep -c {{ docker_osb_nodemanager_ctn_port }}\""
  register: docker_exec_rst
  until: docker_exec_rst.stdout|int == 1
  retries: 30
  delay: 10
  when: docker_osb_inspect_rst.stdout == 'running'
  tags:
    - start-osb-service-container
    - start-all-services

- name: oracle-osb | Run the Admin and Managed Servers
  shell: "docker exec {{ docker_osb_service_ctn_name }} bash -c \"ANSIBLE_OSB_SETUP_TAGS={{ ansible_osb_setup_tags|join(',') }} /entrypoint.sh\""
  tags:
    - start-osb-service-container
    - start-all-services
